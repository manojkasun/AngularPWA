{"version":3,"sources":["ng://@bit/cas-aanzee.pairprogramming.stepper/stepper.component.ts","ng://@bit/cas-aanzee.pairprogramming.stepper/stepper.module.ts"],"names":["StepperComponent","this","minValue","isLoading","hideInput","changeValue","EventEmitter","prototype","ngOnInit","maxValue","Number","parseInt","value","inputChange","event","target","checkAndEmitValue","increaseValue","decreaseValue","emit","Component","args","selector","template","Input","Output","StepperModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"2gBAAA,IAAAA,EAAA,WAgBC,SAAAA,IAPSC,KAAAC,SAAgB,EAEhBD,KAAAE,WAAqB,EACrBF,KAAAG,WAAqB,EAEpBH,KAAAI,YAAiC,IAAIC,EAAAA,aAyDhD,OArDCN,EAAAO,UAAAC,SAAA,WACCP,KAAKQ,SAAWC,OAAOC,SAASV,KAAKQ,UACrCR,KAAKC,SAAWQ,OAAOC,SAASV,KAAKC,UACrCD,KAAKW,MAAQF,OAAOC,SAASV,KAAKW,QAQnCZ,EAAAO,UAAAM,YAAA,SAAYC,OACPF,EAAQF,OAAOC,SAASG,EAAMC,OAAOH,OACzCX,KAAKe,kBAAkBJ,IAOxBZ,EAAAO,UAAAU,cAAA,WACChB,KAAKe,kBAAkBf,KAAKW,MAAQ,IAOrCZ,EAAAO,UAAAW,cAAA,WACCjB,KAAKe,kBAAkBf,KAAKW,MAAQ,IAU7BZ,EAAAO,UAAAS,kBAAR,SAA0BJ,GACrBA,GAAUA,GAAVA,MAAmBA,IAEtBA,EAAQX,KAAKC,UAEVU,EAAQX,KAAKQ,WAChBG,EAAQX,KAAKQ,UAEVG,EAAQX,KAAKC,WAChBU,EAAQX,KAAKC,UAEdD,KAAKW,MAAQF,OAAOE,GACpBX,KAAKI,YAAYc,KAAKlB,KAAKW,4BAnE5BQ,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,eACVC,SAAA,0dAICC,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,2BACAC,EAAAA,UAyDFzB,EAvEA,GCAA,IAAA0B,EAAA,WAIA,SAAAA,KAK4B,2BAL3BC,EAAAA,SAAQN,KAAA,CAAC,CACTO,aAAc,CAAC5B,GACf6B,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC/B,OAEiB0B,EAT5B","sourcesContent":["import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n\tselector: 'valk-stepper',\n\ttemplateUrl: './stepper.component.html',\n\tstyleUrls: ['./stepper.component.scss'],\n})\nexport class StepperComponent implements OnInit {\n\t@Input() maxValue: any;\n\t@Input() minValue: any = 1;\n\t@Input() value: any;\n\t@Input() isLoading: boolean = false;\n\t@Input() hideInput: boolean = false;\n\t@Input() stepperId: string;\n\t@Output() changeValue: EventEmitter<any> = new EventEmitter();\n\n\tconstructor() {}\n\n\tngOnInit(): void {\n\t\tthis.maxValue = Number.parseInt(this.maxValue);\n\t\tthis.minValue = Number.parseInt(this.minValue);\n\t\tthis.value = Number.parseInt(this.value);\n\t}\n\n\t/**\n\t * Handle the input change: convert the value to number and call checkAndEmitValue\n\t * @param event any - the input change event\n\t * @return void\n\t */\n\tinputChange(event: any): void {\n\t\tlet value = Number.parseInt(event.target.value);\n\t\tthis.checkAndEmitValue(value);\n\t}\n\n\t/**\n\t * Call checkAndEmitValue with the current value increased by one\n\t * @return void\n\t */\n\tincreaseValue(): void {\n\t\tthis.checkAndEmitValue(this.value + 1);\n\t}\n\n\t/**\n\t * Call checkAndEmitValue with the current value decreased by one\n\t * @return void\n\t */\n\tdecreaseValue(): void {\n\t\tthis.checkAndEmitValue(this.value - 1);\n\t}\n\n\t/**\n\t * Check if the value parameter is allowed to be set as the new value\n\t * - If allowed to be set: change the value and emit the change\n\t * - If not allowed to be set: change the value to the nearest safeguard and emit the change\n\t * @param any value - the numeric value to be set as the new value\n\t * @return void\n\t */\n\tprivate checkAndEmitValue(value: any): void {\n\t\tif (value !== value || value === undefined || value === null) {\n\t\t\t// NOTE: Check value against itself to check if its NaN, since NaN is the only JS value unequal to itself.\n\t\t\tvalue = this.minValue;\n\t\t}\n\t\tif (value > this.maxValue) {\n\t\t\tvalue = this.maxValue;\n\t\t}\n\t\tif (value < this.minValue) {\n\t\t\tvalue = this.minValue;\n\t\t}\n\t\tthis.value = Number(value);\n\t\tthis.changeValue.emit(this.value);\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StepperComponent } from './stepper.component';\n\n@NgModule({\n\tdeclarations: [StepperComponent],\n\timports: [CommonModule],\n\texports: [StepperComponent],\n})\nexport class StepperModule {}\n"]}