{"version":3,"file":"rating.component.d.ts","sources":["rating.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, TemplateRef, ChangeDetectorRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { AccessorContent, RatingResults } from './models';\r\nexport declare const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent;\r\nexport declare class RatingComponent implements ControlValueAccessor, OnInit {\r\n    private changeDetection;\r\n    /** number of icons */\r\n    max: number;\r\n    /** if true will not react on any user events */\r\n    readonly: boolean;\r\n    /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\r\n    titles: string[];\r\n    /** custom template for icons */\r\n    customTemplate: TemplateRef<any>;\r\n    /** fired when icon selected, $event:number equals to selected rating */\r\n    onHover: EventEmitter<number>;\r\n    /** fired when icon selected, $event:number equals to previous rating value */\r\n    onLeave: EventEmitter<number>;\r\n    onChange: any;\r\n    onTouched: any;\r\n    range: RatingResults[];\r\n    value: number;\r\n    protected preValue: number;\r\n    constructor(changeDetection: ChangeDetectorRef);\r\n    onKeydown(event: KeyboardEvent): void;\r\n    ngOnInit(): void;\r\n    writeValue(value: number): void;\r\n    enter(value: number): void;\r\n    reset(): void;\r\n    registerOnChange(fn: (_: number) => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    rate(value: number): void;\r\n    protected buildTemplateObjects(max: number): RatingResults[];\r\n}\r\n"]}