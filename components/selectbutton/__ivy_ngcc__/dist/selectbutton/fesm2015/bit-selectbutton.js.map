{"version":3,"file":"bit-selectbutton.js","sources":["@bit/primefaces.primeng.selectbutton/selectbutton/selectbutton.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ContentChild,TemplateRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectItem} from '../common/selectitem';\nimport {ObjectUtils} from '../utils/objectutils';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SELECTBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-selectButton',\n    template: `\n        <div [ngClass]=\"'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-' + (options ? options.length : 0)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div *ngFor=\"let option of options; let i = index\" #btn class=\"ui-button ui-widget ui-state-default ui-button-text-only {{option.styleClass}}\"\n                [ngClass]=\"{'ui-state-active':isSelected(option), 'ui-state-disabled': disabled || option.disabled, 'ui-state-focus': btn == focusedItem, \n                'ui-button-text-icon-left': (option.icon != null), 'ui-button-icon-only': (option.icon && !option.label)}\" (click)=\"onItemClick($event,option,i)\" (keydown.enter)=\"onItemClick($event,option,i)\"\n                [attr.title]=\"option.title\" [attr.aria-label]=\"option.label\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" [attr.tabindex]=\"tabindex\">\n                <ng-container *ngIf=\"!itemTemplate else customcontent\">\n                    <span [ngClass]=\"['ui-clickable', 'ui-button-icon-left']\" [class]=\"option.icon\" *ngIf=\"option.icon\"></span>\n                    <span class=\"ui-button-text ui-clickable\">{{option.label||'ui-btn'}}</span>\n                </ng-container>\n                <ng-template #customcontent>\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\n                </ng-template>\n            </div>\n        </div>\n    `,\n    providers: [SELECTBUTTON_VALUE_ACCESSOR]\n})\nexport class SelectButton implements ControlValueAccessor {\n\n    @Input() tabindex: number = 0;\n\n    @Input() multiple: boolean;\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() disabled: boolean;\n\n    @Input() dataKey: string\n    \n    @Input() optionLabel: string;\n    \n    @Output() onOptionClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @ContentChild(TemplateRef, { static: false }) itemTemplate;\n    \n    value: any;\n    \n    focusedItem: HTMLDivElement;\n    \n    _options: any[];\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    constructor(private cd: ChangeDetectorRef) {}\n    \n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this._options = opts;\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onItemClick(event, option: SelectItem, index: number) {\n        if(this.disabled || option.disabled) {\n            return;\n        }\n                \n        if(this.multiple) {\n            let itemIndex = this.findItemIndex(option);\n            if(itemIndex != -1)\n                this.value = this.value.filter((val,i) => i!=itemIndex);\n            else\n                this.value = [...this.value||[], option.value];\n        }\n        else {\n            this.value = option.value;\n        }\n        \n        this.onOptionClick.emit({\n            originalEvent: event,\n            option: option,\n            index: index\n        });\n        \n        this.onModelChange(this.value);\n        \n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n    \n    onFocus(event: Event) {\n        this.focusedItem = <HTMLDivElement> event.target;\n    }\n    \n    onBlur(event) {\n        this.focusedItem = null;\n        this.onModelTouched();\n    }\n    \n    isSelected(option: SelectItem) {\n        if(this.multiple)\n            return this.findItemIndex(option) != -1;\n        else\n            return ObjectUtils.equals(option.value, this.value, this.dataKey);\n    }\n    \n    findItemIndex(option: SelectItem) {\n        let index = -1;\n        if(this.value) {\n            for(let i = 0; i < this.value.length; i++) {\n                if(this.value[i] == option.value) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [SelectButton],\n    declarations: [SelectButton]\n})\nexport class SelectButtonModule { }\n"]}