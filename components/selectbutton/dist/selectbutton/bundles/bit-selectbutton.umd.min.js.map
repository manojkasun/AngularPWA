{"version":3,"sources":["ng://@bit/primefaces.primeng.selectbutton/selectbutton/selectbutton.ts"],"names":["SELECTBUTTON_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","SelectButton","multi","cd","this","tabindex","onOptionClick","EventEmitter","onChange","onModelChange","onModelTouched","Object","defineProperty","prototype","_options","val","opts","optionLabel","ObjectUtils","generateSelectItems","writeValue","value","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","onItemClick","event","option","index","multiple","itemIndex_1","findItemIndex","filter","i","__spread","emit","originalEvent","onFocus","focusedItem","onBlur","isSelected","equals","dataKey","length","Component","args","selector","template","providers","ChangeDetectorRef","Input","Output","ContentChild","TemplateRef","static","SelectButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"y2BAMaA,EAAmC,CAC9CC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAC,IAC9BC,OAAO,GAGTD,EAAA,WAoDI,SAAAA,EAAoBE,GAAAC,KAAAD,GAAAA,EA9BXC,KAAAC,SAAmB,EAclBD,KAAAE,cAAmC,IAAIC,EAAAA,aAEvCH,KAAAI,SAA8B,IAAID,EAAAA,aAU5CH,KAAAK,cAAa,aAEbL,KAAAM,eAAc,aAwFlB,OApFIC,OAAAC,eAAaX,EAAAY,UAAA,UAAO,KAApB,WACI,OAAOT,KAAKU,cAGhB,SAAYC,OACJC,EAAOZ,KAAKa,YAAcC,EAAAA,YAAYC,oBAAoBJ,EAAKX,KAAKa,aAAeF,EACvFX,KAAKU,SAAWE,mCAGpBf,EAAAY,UAAAO,WAAA,SAAWC,GACPjB,KAAKiB,MAAQA,EACbjB,KAAKD,GAAGmB,gBAGZrB,EAAAY,UAAAU,iBAAA,SAAiBC,GACbpB,KAAKK,cAAgBe,GAGzBvB,EAAAY,UAAAY,kBAAA,SAAkBD,GACdpB,KAAKM,eAAiBc,GAG1BvB,EAAAY,UAAAa,iBAAA,SAAiBX,GACbX,KAAKuB,SAAWZ,GAGpBd,EAAAY,UAAAe,YAAA,SAAYC,EAAOC,EAAoBC,GACnC,IAAG3B,KAAKuB,WAAYG,EAAOH,SAA3B,CAIA,GAAGvB,KAAK4B,SAAU,KACVC,EAAY7B,KAAK8B,cAAcJ,GAE/B1B,KAAKiB,OADQ,GAAdY,EACc7B,KAAKiB,MAAMc,OAAM,SAAEpB,EAAIqB,GAAM,OAAAA,GAAGH,IAEnCI,EAAOjC,KAAKiB,OAAO,GAAE,CAAES,EAAOT,aAG5CjB,KAAKiB,MAAQS,EAAOT,MAGxBjB,KAAKE,cAAcgC,KAAK,CACpBC,cAAeV,EACfC,OAAQA,EACRC,MAAOA,IAGX3B,KAAKK,cAAcL,KAAKiB,OAExBjB,KAAKI,SAAS8B,KAAK,CACfC,cAAeV,EACfR,MAAOjB,KAAKiB,UAIpBpB,EAAAY,UAAA2B,QAAA,SAAQX,GACJzB,KAAKqC,YAA+BZ,EAAY,QAGpD5B,EAAAY,UAAA6B,OAAA,SAAOb,GACHzB,KAAKqC,YAAc,KACnBrC,KAAKM,kBAGTT,EAAAY,UAAA8B,WAAA,SAAWb,GACP,OAAG1B,KAAK4B,UACkC,GAA/B5B,KAAK8B,cAAcJ,GAEnBZ,EAAAA,YAAY0B,OAAOd,EAAOT,MAAOjB,KAAKiB,MAAOjB,KAAKyC,UAGjE5C,EAAAY,UAAAqB,cAAA,SAAcJ,OACNC,GAAS,EACb,GAAG3B,KAAKiB,MACJ,IAAI,IAAIe,EAAI,EAAGA,EAAIhC,KAAKiB,MAAMyB,OAAQV,IAClC,GAAGhC,KAAKiB,MAAMe,IAAMN,EAAOT,MAAO,CAC9BU,EAAQK,EACR,MAIZ,OAAOL,uBAxIdgB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,iBACVC,SAAU,m6CAgBVC,UAAW,CAACvD,gDA9BgDwD,EAAAA,uDAkC3DC,EAAAA,wBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,wBAEAA,EAAAA,uBAEAA,EAAAA,2BAEAA,EAAAA,6BAEAC,EAAAA,yBAEAA,EAAAA,6BAEAC,EAAAA,aAAYP,KAAA,CAACQ,EAAAA,YAAa,CAAEC,QAAQ,qBAcpCJ,EAAAA,SAoFLpD,EA1IA,gBA4IA,SAAAyD,KAKkC,2BALjCC,EAAAA,SAAQX,KAAA,CAAC,CACNY,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC7D,GACV8D,aAAc,CAAC9D,OAEeyD","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ContentChild,TemplateRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectItem} from '../common/selectitem';\nimport {ObjectUtils} from '../utils/objectutils';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SELECTBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-selectButton',\n    template: `\n        <div [ngClass]=\"'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-' + (options ? options.length : 0)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div *ngFor=\"let option of options; let i = index\" #btn class=\"ui-button ui-widget ui-state-default ui-button-text-only {{option.styleClass}}\"\n                [ngClass]=\"{'ui-state-active':isSelected(option), 'ui-state-disabled': disabled || option.disabled, 'ui-state-focus': btn == focusedItem, \n                'ui-button-text-icon-left': (option.icon != null), 'ui-button-icon-only': (option.icon && !option.label)}\" (click)=\"onItemClick($event,option,i)\" (keydown.enter)=\"onItemClick($event,option,i)\"\n                [attr.title]=\"option.title\" [attr.aria-label]=\"option.label\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" [attr.tabindex]=\"tabindex\">\n                <ng-container *ngIf=\"!itemTemplate else customcontent\">\n                    <span [ngClass]=\"['ui-clickable', 'ui-button-icon-left']\" [class]=\"option.icon\" *ngIf=\"option.icon\"></span>\n                    <span class=\"ui-button-text ui-clickable\">{{option.label||'ui-btn'}}</span>\n                </ng-container>\n                <ng-template #customcontent>\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\n                </ng-template>\n            </div>\n        </div>\n    `,\n    providers: [SELECTBUTTON_VALUE_ACCESSOR]\n})\nexport class SelectButton implements ControlValueAccessor {\n\n    @Input() tabindex: number = 0;\n\n    @Input() multiple: boolean;\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() disabled: boolean;\n\n    @Input() dataKey: string\n    \n    @Input() optionLabel: string;\n    \n    @Output() onOptionClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    @ContentChild(TemplateRef, { static: false }) itemTemplate;\n    \n    value: any;\n    \n    focusedItem: HTMLDivElement;\n    \n    _options: any[];\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    constructor(private cd: ChangeDetectorRef) {}\n    \n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this._options = opts;\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onItemClick(event, option: SelectItem, index: number) {\n        if(this.disabled || option.disabled) {\n            return;\n        }\n                \n        if(this.multiple) {\n            let itemIndex = this.findItemIndex(option);\n            if(itemIndex != -1)\n                this.value = this.value.filter((val,i) => i!=itemIndex);\n            else\n                this.value = [...this.value||[], option.value];\n        }\n        else {\n            this.value = option.value;\n        }\n        \n        this.onOptionClick.emit({\n            originalEvent: event,\n            option: option,\n            index: index\n        });\n        \n        this.onModelChange(this.value);\n        \n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n    \n    onFocus(event: Event) {\n        this.focusedItem = <HTMLDivElement> event.target;\n    }\n    \n    onBlur(event) {\n        this.focusedItem = null;\n        this.onModelTouched();\n    }\n    \n    isSelected(option: SelectItem) {\n        if(this.multiple)\n            return this.findItemIndex(option) != -1;\n        else\n            return ObjectUtils.equals(option.value, this.value, this.dataKey);\n    }\n    \n    findItemIndex(option: SelectItem) {\n        let index = -1;\n        if(this.value) {\n            for(let i = 0; i < this.value.length; i++) {\n                if(this.value[i] == option.value) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [SelectButton],\n    declarations: [SelectButton]\n})\nexport class SelectButtonModule { }\n"]}